{"version":3,"sources":["app/store.js","app/moduls/thunkForRequest.js","app/moduls/widgetContainer.js","app/moduls/stateMap.js","App.js","serviceWorker.js","index.js"],"names":["weatherStore","createStore","state","name","temperature","feels_like","humidity","weather","fetching","action","type","console","log","newObj","status","applyMiddleware","thunkMiddleware","weatherObj","WeatherWidget","connect","store","storeName","storeTemperature","storeFeels_like","storeHumidity","storeWeather","storeFetching","thunkForAPIrequest","city","dispatch","Promise","resolve","reject","weatherObject","setTimeout","then","data","catch","props","useState","localCityState","setLocalCityState","useEffect","className","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b564d8c.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n/**\r\n * Reducer for weather state\r\n * @param {object} action action type and new state data\r\n * @returns {object} state returns new weather state\r\n */\r\nfunction weatherStoreChanger(\r\n  state = {\r\n    name: \"null\",\r\n    temperature: \"null\",\r\n    feels_like: \"null\",\r\n    humidity: \"null\",\r\n    weather: \"null\",\r\n    fetching: false,\r\n  },\r\n  action\r\n) {\r\n  if (action.type === \"SET_NEW_WEATHER_DATA\") {\r\n    console.log(state);\r\n    return {\r\n      name: action.newObj.name,\r\n      temperature: action.newObj.temperature,\r\n      feels_like: action.newObj.feels_like,\r\n      humidity: action.newObj.humidity,\r\n      weather: action.newObj.weather,\r\n      fetching: state.fetching,\r\n    };\r\n  }\r\n  if (action.type === \"FETCHING\") {\r\n    return {\r\n      name: state.name,\r\n      temperature: state.temperature,\r\n      feels_like: state.feels_like,\r\n      humidity: state.humidity,\r\n      weather: state.weather,\r\n      fetching: state.fetching,\r\n      fetching: action.status,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\n/**\r\n * @todo - create weatherStore store\r\n */\r\nconst weatherStore = createStore(\r\n  weatherStoreChanger,\r\n  applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nexport default weatherStore;\r\n","let weatherObj = {\r\n  a: {\r\n    name: \"Москва\",\r\n    temperature: \"-15\",\r\n    feels_like: \"-20\",\r\n    humidity: \"80%\",\r\n    weather: \"Снег\",\r\n  },\r\n  b: {\r\n    name: \"Санкт-Петербург\",\r\n    temperature: \"-15\",\r\n    feels_like: \"-20\",\r\n    humidity: \"80%\",\r\n    weather: \"Дождь\",\r\n  },\r\n  c: {\r\n    name: \"Ростов на дону\",\r\n    temperature: \"-15\",\r\n    feels_like: \"-20\",\r\n    humidity: \"80%\",\r\n    weather: \"Снегодождь\",\r\n  },\r\n};\r\n\r\n/**\r\n * @param {string} city city for fetch request\r\n * @todo Request data and pass the result to weatherStoreChanger\r\n * @returns nothing\r\n */\r\nexport default function thunkForAPIrequest(city) {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"FETCHING\", status: true });\r\n\r\n    new Promise((resolve, reject) => {\r\n      let weatherObject;\r\n      if (city === \"Moscow\") {\r\n        weatherObject = weatherObj.a;\r\n      }\r\n      if (city === \"Saint Petersburg\") {\r\n        weatherObject = weatherObj.b;\r\n      }\r\n      if (city === \"Rostov-on-Don\") {\r\n        weatherObject = weatherObj.c;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        resolve(weatherObject);\r\n      }, 1000);\r\n    })\r\n      .then((data) => {\r\n        return data; /* .json(); */\r\n      })\r\n      .then((data) => {\r\n        dispatch({\r\n          type: \"SET_NEW_WEATHER_DATA\",\r\n          newObj: {\r\n            name: data.name,\r\n            temperature: data.temperature,\r\n            feels_like: data.feels_like,\r\n            humidity: data.humidity,\r\n            weather: data.weather,\r\n          },\r\n        });\r\n        return;\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: \"FETCHING\", status: false });\r\n      })\r\n      .catch(() => {\r\n        console.log(\"query error\");\r\n        dispatch({ type: \"FETCHING\", status: false });\r\n      });\r\n  };\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport thunkForAPIrequest from \"./thunkForRequest\";\r\nimport stateMapForWeatherContainer from \"./stateMap\";\r\n/**\r\n * Reducer for weather state\r\n * @param {object} action action type and new state data\r\n * @returns {object} state returns new weather state\r\n */\r\n\r\nfunction WeatherWidgetContainer(props) {\r\n  let [localCityState, setLocalCityState] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (localCityState != props.city) {\r\n      props.thunkForAPIrequest(props.city);\r\n      setLocalCityState(props.city);\r\n    }\r\n  });\r\n\r\n  if (props.storeFetching) {\r\n    return <div className=\"preloader\">Загрузка...</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"WeatherWidget\">\r\n        <div className=\"weatherFlex\">\r\n          <h1>{props.storeName}</h1>\r\n          <h1>{props.storeTemperature}</h1>\r\n        </div>\r\n        <div className=\"weatherFlex\">\r\n          <p>Ощущается: {props.storeFeels_like}</p>\r\n          <p>Влажность: {props.storeHumidity}</p>\r\n        </div>\r\n        <div className=\"weatherFlex\">\r\n          <p>{props.storeWeather}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet WeatherWidget = connect(stateMapForWeatherContainer, {\r\n  thunkForAPIrequest,\r\n})(WeatherWidgetContainer);\r\n\r\nexport default WeatherWidget;\r\n","\r\n/**\r\n * @param {object} store current state of weatherState\r\n * @returns {object} copy of weatherState\r\n */\r\nexport default function stateMapForWeatherContainer(store) {\r\n    return {\r\n      storeName: store.name,\r\n      storeTemperature: store.temperature,\r\n      storeFeels_like: store.feels_like,\r\n      storeHumidity: store.humidity,\r\n      storeWeather: store.weather,\r\n      storeFetching: store.fetching,\r\n    };\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport weatherStore from './app/store'\r\nimport WeatherWidget from './app/moduls/widgetContainer'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  /*   useRouteMatch,\r\n  useParams, */\r\n} from \"react-router-dom\";\r\n\r\n/**\r\n * @constructor\r\n * @returns jsx+react-native component\r\n */\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <ul>\r\n        <Link to=\"/\">\r\n          <li>Москва</li>\r\n        </Link>\r\n        <Link to=\"/spb\">\r\n          <li>Санкт-Петербург</li>\r\n        </Link>\r\n        <Link to=\"/rnd\">\r\n          <li>Ростов-на-Дону</li>\r\n        </Link>\r\n      </ul>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <WeatherWidget store={weatherStore} city=\"Moscow\"></WeatherWidget>\r\n        </Route>\r\n        <Route path=\"/spb\">\r\n          <WeatherWidget\r\n            store={weatherStore}\r\n            city=\"Saint Petersburg\"\r\n          ></WeatherWidget>\r\n        </Route>\r\n        <Route path=\"/rnd\">\r\n          <WeatherWidget\r\n            store={weatherStore}\r\n            city=\"Rostov-on-Don\"\r\n          ></WeatherWidget>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}